#!/bin/bash
set -eu

command_exists() {
    command -v $1 > /dev/null
    return $?
}

read_value_or_list() {
    local prefix="$1"
    result=()

    if [[ -n "${!prefix:-}" ]]; then
        result+=("${!prefix}")
    fi
    
    for (( i=0; ; i++ )); do
        local parameter="${prefix}_${i}"
        if [[ -z "${!parameter:-}" ]]; then
            break
        fi
        result+=("${!parameter}")
    done
}

expand_home() {
    # Too bad we don't have wordexp() in Bash.
    echo -ne "${1/#\~/$HOME}"
}

path_to_component() {
    echo -ne "${1//\//__}"
}

detect_project_caches() {
    result=()
    if [ -f "package.json" ]; then
        echo "Detected a Node.js project (package.json present). "
        node_paths=("node_modules")
        if [ -f "package-lock.json" ]; then
            if command_exists npm; then
                npm_cache=$(npm config get cache) && node_paths+=("$npm_cache")
            else
                echo "Warning: npm lock file found, but npm binary is not available."
            fi
        fi
        if [ -f "yarn.lock" ]; then
            if command_exists yarn; then
                yarn_cache=$(yarn cache dir) && node_paths+=("$yarn_cache")
            else
                echo "Warning: yarn lock file found, but yarn binary is not available."
            fi
        fi
        if [ -f "pnpm-lock.yaml" ]; then
            if command_exists pnpm; then
                pnpm_cache=$(pnpm store path) && node_paths+=("$pnpm_cache")
            else
                echo "Warning: pnpm lock file found, but pnpm binary is not available."
            fi
        fi
        result+=("${node_paths[@]}")
        echo "Caching ${node_paths[*]}."
    fi
    if [ -f "go.mod" ]; then
        echo "Detected a Go project (go.mod present)."
        go_paths=()
        if command_exists go; then
            gomodcache=$(go env GOMODCACHE) && go_paths+=("$gomodcache")
            gocache=$(go env GOCACHE) && go_paths+=("$gocache")
            result+=("${go_paths[@]}")
        else
            echo "Warning: go.mod file found, but go binary is not available."
        fi 
        echo "Caching ${go_paths[*]}."
    fi
}

if [[ -z "${NSC_CACHE_PATH:-}" ]]; then
    echo "Could not detect cache volume path. To enable caching add the following to pipeline.yml:
    agents:
      nsc-cache-tag: my-repo/my-step-cache
      nsc-cache-size: 2g # optional, default: 5g"
    exit 1
fi

cache_root="${NSC_CACHE_PATH}"
read_value_or_list BUILDKITE_PLUGIN_NSCACHE_PATHS
paths=("${result[@]}")

if [ ${#paths[@]} -eq 0 ]; then
    detect_project_caches
    paths=("${result[@]}")
fi

if [ ${#paths[@]} -eq 0 ]; then
    echo 'No cache paths specified and no framework detected. Add `paths: ["path/to/cached/directory"]` to pipeline.yml'
    exit 1
fi

for p in "${paths[@]}"; do
    fp=$(expand_home "$p")
    k=$(path_to_component "$p")
    cp="$cache_root/nscache/$k"

    mkdir -p "$fp" "$cp"
    mount --bind "$cp" "$fp"

    size=$(du -sh "$fp" | cut -f1)
    echo "Mounted cache on $fp (size $size)"
done

